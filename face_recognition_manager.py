import os
import numpy as np
import face_rec
import cv2
from firebase_config import FirebaseManager

class FaceRecognitionManager:
    def __init__(self, faces_directory='faces', firebase_service_account=None):
        """
        YÃ¼z tanÄ±ma yÃ¶neticisini baÅŸlatÄ±r
        faces_directory: YÃ¼z resimlerinin bulunduÄŸu klasÃ¶r
        firebase_service_account: Firebase service account JSON dosyasÄ± yolu
        """
        self.faces_directory = faces_directory
        self.known_face_encodings = []
        self.known_face_names = []
        self.member_ids = []
        
        # Firebase baÄŸlantÄ±sÄ±
        self.firebase_manager = FirebaseManager(firebase_service_account)
        
        # YÃ¼zleri yÃ¼kle
        self.load_known_faces()
        
        # BaÅŸlangÄ±Ã§ta tÃ¼m presence durumlarÄ±nÄ± sÄ±fÄ±rla
        self.firebase_manager.reset_all_presence()
        
        # TanÄ±nan kiÅŸileri takip etmek iÃ§in set
        self.currently_present = set()
    
    def load_known_faces(self):
        """
        faces klasÃ¶rÃ¼ndeki resimleri yÃ¼kler ve encoding'lerini oluÅŸturur
        Dosya adlarÄ± member ID olarak kullanÄ±lÄ±r (Ã¶rn: member123.jpg)
        """
        if not os.path.exists(self.faces_directory):
            print(f"UyarÄ±: {self.faces_directory} klasÃ¶rÃ¼ bulunamadÄ±!")
            return
        
        print("Bilinen yÃ¼zler yÃ¼kleniyor...")
        
        for filename in os.listdir(self.faces_directory):
            if filename.lower().endswith(('.jpg', '.jpeg', '.png')):
                # Dosya adÄ±ndan member ID'yi al (uzantÄ±yÄ± Ã§Ä±kar)
                member_id = os.path.splitext(filename)[0]
                file_path = os.path.join(self.faces_directory, filename)
                
                try:
                    # Resmi yÃ¼kle
                    image = face_rec.load_image_file(file_path)
                    
                    # Face encoding oluÅŸtur
                    encodings = face_rec.face_encodings(image)
                    
                    if encodings:
                        self.known_face_encodings.append(encodings[0])
                        self.member_ids.append(member_id)
                        
                        # Firebase'den isim bilgisini al
                        member_info = self.firebase_manager.get_member_info(member_id)
                        if member_info and 'name' in member_info:
                            display_name = member_info['name']
                        else:
                            display_name = member_id
                        
                        self.known_face_names.append(display_name)
                        print(f"âœ“ {filename} yÃ¼klendi - Member ID: {member_id}, Ä°sim: {display_name}")
                    else:
                        print(f"âœ— {filename} - YÃ¼z bulunamadÄ±!")
                        
                except Exception as e:
                    print(f"âœ— {filename} yÃ¼klenirken hata: {e}")
        
        print(f"Toplam {len(self.known_face_encodings)} yÃ¼z yÃ¼klendi")
    
    def process_frame(self, frame):
        """
        Frame'i iÅŸler ve yÃ¼z tanÄ±ma yapar
        """
        # Frame'i kÃ¼Ã§Ã¼lt (performans iÃ§in)
        small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)
        rgb_small_frame = cv2.cvtColor(small_frame, cv2.COLOR_BGR2RGB)
        
        # YÃ¼z konumlarÄ±nÄ± ve encoding'lerini bul
        face_locations = face_rec.face_locations(rgb_small_frame)
        face_encodings = face_rec.face_encodings(rgb_small_frame, face_locations)
        
        face_names = []
        detected_member_ids = []
        
        for face_encoding in face_encodings:
            # Bilinen yÃ¼zlerle karÅŸÄ±laÅŸtÄ±r
            matches = face_rec.compare_faces(self.known_face_encodings, face_encoding)
            name = "Unknown"
            member_id = None
            
            # En yakÄ±n eÅŸleÅŸmeyi bul
            face_distances = face_rec.face_distance(self.known_face_encodings, face_encoding)
            best_match_index = np.argmin(face_distances)
            
            if matches[best_match_index]:
                name = self.known_face_names[best_match_index]
                member_id = self.member_ids[best_match_index]
                detected_member_ids.append(member_id)
            
            face_names.append(name)
        
        # Firebase'de presence durumunu gÃ¼ncelle
        self.update_presence_status(detected_member_ids)
        
        # Frame'e Ã§erÃ§eve ve isim ekle
        self.draw_face_boxes(frame, face_locations, face_names)
        
        return frame
    
    def update_presence_status(self, detected_member_ids):
        """
        Tespit edilen member ID'lerin Firebase'deki isPresent durumunu gÃ¼nceller
        """
        # Yeni tespit edilen kiÅŸiler
        newly_detected = set(detected_member_ids) - self.currently_present
        
        # ArtÄ±k gÃ¶rÃ¼nmeyen kiÅŸiler
        no_longer_present = self.currently_present - set(detected_member_ids)
        
        # Yeni tespit edilenleri Firebase'de gÃ¼ncelle
        for member_id in newly_detected:
            self.firebase_manager.update_member_presence(member_id, True)
            print(f"ğŸŸ¢ {member_id} ÅŸimdi mevcut")
        
        # ArtÄ±k gÃ¶rÃ¼nmeyenleri Firebase'de gÃ¼ncelle
        for member_id in no_longer_present:
            self.firebase_manager.update_member_presence(member_id, False)
            print(f"ğŸ”´ {member_id} artÄ±k mevcut deÄŸil")
        
        # Mevcut durumu gÃ¼ncelle
        self.currently_present = set(detected_member_ids)
    
    def draw_face_boxes(self, frame, face_locations, face_names):
        """
        Frame Ã¼zerine yÃ¼z Ã§erÃ§eveleri ve isimleri Ã§izer
        """
        for (top, right, bottom, left), name in zip(face_locations, face_names):
            # KoordinatlarÄ± orijinal boyuta Ã§evir
            top *= 4
            right *= 4
            bottom *= 4
            left *= 4
            
            # YÃ¼z Ã§erÃ§evesi Ã§iz
            color = (0, 255, 0) if name != "Unknown" else (0, 0, 255)
            cv2.rectangle(frame, (left, top), (right, bottom), color, 2)
            
            # Ä°sim etiketi Ã§iz
            cv2.rectangle(frame, (left, bottom - 35), (right, bottom), color, cv2.FILLED)
            font = cv2.FONT_HERSHEY_DUPLEX
            cv2.putText(frame, name, (left + 6, bottom - 6), font, 1.0, (255, 255, 255), 1)
    
    def cleanup(self):
        """
        Uygulama kapanÄ±rken tÃ¼m presence durumlarÄ±nÄ± sÄ±fÄ±rla
        """
        print("Temizlik yapÄ±lÄ±yor...")
        self.firebase_manager.reset_all_presence()
        print("TÃ¼m presence durumlarÄ± sÄ±fÄ±rlandÄ±")